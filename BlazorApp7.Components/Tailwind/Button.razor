@inherits UiComponentBase

<button @ref="buttonRef"
        type="@Type"
        class="@ClassNames(Classes(Variant, Size), Class)"
        @onclick="@OnClick"
        disabled="@Disabled"
        @attributes="IncludeAttributes">
    @ChildContent
</button>

@code {
    private ElementReference buttonRef;

    // Button Variants
    public enum ButtonVariant
    {
        Default,
        Destructive,
        Outline,
        Secondary,
        Ghost,
        Link,
    }

    // Button Sizes
    public enum ButtonSize
    {
        Default,
        Small,
        Large,
        Icon,
    }
    
    public static string GetVariantClass(ButtonVariant style) => style switch
    {
        ButtonVariant.Default => "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        ButtonVariant.Destructive => "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        ButtonVariant.Outline => "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        ButtonVariant.Secondary => "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ButtonVariant.Ghost => "hover:bg-accent hover:text-accent-foreground",
        ButtonVariant.Link => "text-primary underline-offset-4 hover:underline",
        _ => ""
    };
    
    public static string GetSizeClass(ButtonSize size) => size switch
    {
        ButtonSize.Default => "h-9 px-4 py-2",
        ButtonSize.Small => "h-8 rounded-md px-3 text-xs",
        ButtonSize.Large => "h-10 rounded-md px-8",
        ButtonSize.Icon => "h-9 w-9",
        _ => ""
    };
    
    public static string BaseClass { get; set; } = "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50";
    public static string Classes(ButtonVariant variant, ButtonSize size) =>
        CssUtils.ClassNames(BaseClass, GetVariantClass(variant), GetSizeClass(size));

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    public virtual IReadOnlyDictionary<string, object>? IncludeAttributes => SanitizeAttributes(AdditionalAttributes);

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Default;
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Default;
}
