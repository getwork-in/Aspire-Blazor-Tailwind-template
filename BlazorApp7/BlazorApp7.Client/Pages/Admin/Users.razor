@using Microsoft.AspNetCore.Authorization

@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@* @rendermode @(new InteractiveAutoRenderMode(false)) *@
@rendermode InteractiveAuto

<PageTitle>Users</PageTitle>

<Breadcrumbs HomeLabel="Home" HomeHref="/admin">
    <Breadcrumb>
        <Heading4 class="text-gray-600">Users</Heading4>
    </Breadcrumb>
</Breadcrumbs>

<div class="mx-auto mb-20 mt-8 max-w-screen-lg">
    <Heading1>User Management</Heading1>
    <p class="my-4">This page allows administrators to manage user accounts.</p>

    <div class="my-4">
        <Button OnClick="AddUser">Add New User</Button>
    </div>

    <table class="table-auto">
        <TableHeader>
            <TableRow>
                <TableHead scope="col" class="px-6 py-3">Username</TableHead>
                <TableHead scope="col" class="px-6 py-3">Email</TableHead>
                <TableHead scope="col" class="px-6 py-3">Role</TableHead>
                <TableHead scope="col" class="px-6 py-3"></TableHead>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (loading)
            {
                <TableRow>
                    <TableCell class="px-6 py-4" colspan="4">
                        <Loading />
                    </TableCell>
                </TableRow>
            }
            else
            {
                @foreach (var user in users)
                {
                    <TableRow>
                        <TableCell class="px-6 py-4">@user.Username</TableCell>
                        <TableCell class="px-6 py-4">@user.Email</TableCell>
                        <TableCell class="px-6 py-4">@user.Role</TableCell>
                        <TableCell class="px-6 py-4">
                            <Button OnClick="@(() => EditUser(user))">Edit</Button>
                            <Button OnClick="@(() => DeleteUser(user))">Delete</Button>
                        </TableCell>
                    </TableRow>
                }
            }
        </TableBody>
    </table>
</div>

@code {
    private bool loading = true;
    private List<User> users = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulate fetching users from a service
        await Task.Delay(1000);
        users = new List<User>
        {
            new User { Username = "admin", Email = "admin@example.com", Role = "Admin" },
            new User { Username = "johndoe", Email = "johndoe@example.com", Role = "User" },
            new User { Username = "janedoe", Email = "janedoe@example.com", Role = "User" }
        };

        StateHasChanged();

        loading = false;
    }

    private void AddUser()
    {
        // Logic to add a new user
    }

    private void EditUser(User user)
    {
        // Logic to edit an existing user
    }

    private void DeleteUser(User user)
    {
        // Logic to delete an existing user
    }

    public class User
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}
