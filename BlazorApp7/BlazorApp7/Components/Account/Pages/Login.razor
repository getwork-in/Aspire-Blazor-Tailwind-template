@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp7.Data
@using static BlazorApp7.Components.CssUtils

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="mx-auto mt-8 max-w-lg">
    <div class="max-w-xl">
        <Heading1>Use a local account to log in.</Heading1>
        <StatusMessage class="mb-3" Message="@errorMessage" />
        <section class="mt-4 overflow-hidden sm:shadow sm:rounded-md">
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <div class="sm:p-6">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary class="mb-3 text-center font-semibold text-danger" /> *@
                    <div class="flex flex-col gap-y-4">
                        <div>
                            <div>
                                <label for="Email" class="@TextInput.LabelClasses">Email</label>
                                <div class="relative mt-1 rounded-md shadow-sm">
                                    <InputText id="email" type="text" @bind-Value="Input.Email" class="@TextInput.InputClasses" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        <div>
                            <div>
                                <label for="UserName" class="@TextInput.LabelClasses">Password</label>
                                <div class="relative mt-1 rounded-md shadow-sm">
                                    <InputText id="password" type="password" @bind-Value="Input.Password" class="@TextInput.InputClasses" autocomplete="current-password" aria-required="true" placeholder="password" />
                                    <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <InputCheckbox id="remember-me" @bind-Value="Input.RememberMe" class="@CheckboxInput.InputClasses" />
                                <label for="remember-me" class="ml-2 block select-none text-sm text-gray-900 dark:text-gray-50">Remember Me</label>
                            </div>
                        </div>

                        <div>
                            <Button id="login-submit" type="submit">Log in</Button>
                        </div>

                        <div class="mt-8 text-sm">
                            <p class="mb-3">
                                <HyperLink class="font-semibold" id="forgot-password" href="Account/ForgotPassword">Forgot your password?</HyperLink>
                            </p>
                            <p class="mb-3">
                                <HyperLink class="font-semibold" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</HyperLink>
                            </p>
                            <p class="mb-3">
                                <HyperLink class="font-semibold" id="resend-confirmation" href="Account/ResendEmailConfirmation">Resend email confirmation</HyperLink>
                            </p>
                        </div>
                    </div>
                </div>
            </EditForm>
        </section>
        <div class="mt-8">
            <section>
                <Heading3>Use another service to log in.</Heading3>
                <ExternalLoginPicker />
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public static class TextInput
    {
        public static string ErrorClasses { get; set; } = "mt-2 text-sm text-red-500";
        public static string LabelClasses { get; set; } = "block text-sm font-medium text-gray-700 dark:text-gray-300";
        public static string InputBaseClasses { get; set; } = "block w-full sm:text-sm rounded-md dark:text-white dark:bg-gray-900 disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:shadow-none";
        public static string InputValidClasses { get; set; } = "shadow-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600";
        public static string InputInvalidClasses { get; set; } = "pr-10 border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500";
        public static string InputClasses { get; set; } = InputBaseClasses + " " + InputValidClasses;
    }

    public static class CheckboxInput
    {
        public static string ErrorClasses { get; set; } = "text-gray-500";
        public static string LabelClasses { get; set; } = "font-medium text-gray-700 dark:text-gray-300";
        public static string InputClasses { get; set; } = "focus:ring-indigo-500 h-4 w-4 text-indigo-600 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:ring-offset-black";
    }

}
