@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp7.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="mb-6 text-2xl font-bold">Change Password</h3>
<StatusMessage Message="@message" />

<div class="mx-auto max-w-4xl space-y-6">
    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" class="space-y-4">
        <DataAnnotationsValidator />
        @* <ValidationSummary class="text-red-500" role="alert" /> *@

        <!-- Old Password Input -->
        <div>
            <label for="Input.OldPassword" class="block text-sm font-medium text-gray-700">Old password</label>
            <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" autocomplete="current-password"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                       placeholder="Enter the old password" aria-required="true" />
            <ValidationMessage For="() => Input.OldPassword" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- New Password Input -->
        <div>
            <label for="Input.NewPassword" class="block text-sm font-medium text-gray-700">New password</label>
            <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" autocomplete="new-password"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                       placeholder="Enter the new password" aria-required="true" />
            <ValidationMessage For="() => Input.NewPassword" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Confirm Password Input -->
        <div>
            <label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700">Confirm password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" autocomplete="new-password"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                       placeholder="Confirm the new password" aria-required="true" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Update Password Button -->
        <Button Class="w-full rounded-md bg-blue-600 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Update Password
        </Button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
