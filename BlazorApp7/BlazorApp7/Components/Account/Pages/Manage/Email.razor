@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp7.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<h3 class="mb-6 text-2xl font-bold">Manage Email</h3>

<StatusMessage Message="@message" />

<div class="mx-auto max-w-4xl space-y-6">
    <!-- Form to send email verification -->
    <form @onsubmit="OnSendEmailVerificationAsync" id="send-verification-form" method="post" class="hidden">
        <AntiforgeryToken />
    </form>

    <!-- Change Email Form -->
    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" class="space-y-4">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-500" role="alert" />

        <!-- Current Email Display -->
        @if (isEmailConfirmed)
        {
            <div class="flex items-center space-x-2">
                <div class="flex-1">
                    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                    <input type="text" value="@email" id="email"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                           placeholder="Enter your email" disabled />
                </div>
                <span class="font-bold text-green-600">✓</span>
            </div>
        }
        else
        {
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <input type="text" value="@email" id="email"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                       placeholder="Enter your email" disabled />
                <button type="submit" form="send-verification-form"
                        class="mt-2 text-blue-600 hover:underline focus:outline-none">
                    Send verification email
                </button>
            </div>
        }

        <!-- New Email Input -->
        <div>
            <label for="Input.NewEmail" class="block text-sm font-medium text-gray-700">New Email</label>
            <InputText @bind-Value="Input.NewEmail" id="Input.NewEmail" autocomplete="email"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                       placeholder="Enter a new email" aria-required="true" />
            <ValidationMessage For="() => Input.NewEmail" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Change Email Button -->
        <Button Class="w-full rounded-md bg-blue-600 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Change Email
        </Button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
