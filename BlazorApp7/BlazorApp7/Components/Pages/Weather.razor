@page "/weather"
@attribute [StreamRendering(enabled: true)]

<PageTitle>Weather</PageTitle>

<div class="mx-auto mb-20 mt-8 max-w-screen-md">
    <Heading1>Weather</Heading1>

    <p class="my-4">This component demonstrates showing data.</p>

    @if (forecasts is null)
    {
        <Loading />
    }
    else
    {
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                     <th scope="col" class="px-6 py-3">Date</th>
                     <th scope="col" class="px-6 py-3">Temp. (C)</th>
                     <th scope="col" class="px-6 py-3">Temp. (F)</th>
                     <th scope="col" class="px-6 py-3">Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4">@forecast.Date.ToString("d")</td>
                        <td class="px-6 py-4">@forecast.TemperatureC</td>
                        <td class="px-6 py-4">@forecast.TemperatureF</td>
                        <td class="px-6 py-4">@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1000);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
